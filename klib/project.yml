---

:project:
  :use_exceptions: true
  :use_test_preprocessor: true
  :use_deep_dependencies: true
  :build_root: build
  :release_build: true
  :test_file_prefix: test_
  :options_paths:
    - config/

:release_build:
  :output: kinetic-c
  # Uncomment the following to enable use of assembly files
  # :use_assembly: true

# Enable this section to configure environment vars, if needed
# :environment:

:paths:
  :test:
    - +:test/**
    - -:test/support
  :support:
    - test/support/**
  :source:
    - src/lib/**
    - src/utility/**
    - vendor/protobuf-c/protobuf-c/protobuf-c.c
    - vendor/socket99/socket99.c
  :include:
    - src/**
    - include/**
    - vendor/
    - vendor/protobuf-c/**
  # Refactor release build once the Kinetic-C library is built, and link to it sepearately
  :release_toolchain_include:
    - src/**
    - include/**
    - vendor/
    - vendor/protobuf-c/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST
  :release:
    - *common_defines

:flags:
  :release:
    :link:
      :kinetic-c-client:
        - -l libssl
  :test:
    :link:
      :test_kinetic_hmac:
        - -l libssl

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :error
  :enforce_strict_ordering: true
  :plugins:
    - :ignore
    # - :ignore_args
    # - :array
    # - :cexception
    # - :callback
    - :return_thru_ptr
  :unity_helper_path: test/support/unity_helper.h
  :includes_h_post_orig_header:
    - "unity.h"
    - "unity_helper.h"
  :treat_as:
    uint8_t:    HEX8
    uint16_t:   HEX16
    uint32_t:   UINT32
    int8_t:     INT8
    bool_t:     BOOL
    size_t:     INT
    KineticSessionHandle: INT
    KineticOperationHandle: INT
  :callback_include_count: true

:tools:
  :test_includes_preprocessor:
    :executable: gcc
    :arguments:
      - -E
      - -MM
      - -MG
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -D"$": COLLECTION_DEFINES_TEST_AND_VENDOR
      - -D"$": DEFINES_TEST_PREPROCESS
      - -DGNU_COMPILER
      - -std=c99
      - -g
      - -Wall
      - -Wextra
      - -pedantic
      - -D_POSIX_C_SOURCE=1
      - -D_C99_SOURCE=1
      - ${1}
  :test_compiler:
    :executable: gcc
    :arguments:
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -D"$": COLLECTION_DEFINES_TEST_AND_VENDOR
      - -DGNU_COMPILER
      - -std=c99
      - -g
      - -Wall
      - -Wextra
      - -pedantic
      - -D_C99_SOURCE=1
      - -D_DARWIN_C_SOURCE=1
      - -c ${1}
      - -o ${2}
  :test_linker:
    :executable: gcc
    :name: test_linker
    :arguments:
      - "\"${1}\""
      - -l crypto
      - "-o \"${2}\""
  :gcov_linker:
    :executable: gcc
    :arguments:
      - -fprofile-arcs
      - -ftest-coverage
      - -l crypto
      - ${1}
      - -o ${2}
  :release_compiler:
    :executable: gcc
    :arguments:
      - -I"$": 'COLLECTION_PATHS_SOURCE_INCLUDE_VENDOR'
      - -I"$": 'COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE'
      - -D"$": 'COLLECTION_DEFINES_RELEASE_AND_VENDOR'
      - -DGNU_COMPILER
      - -std=c99
      - -g
      - -Wall
      - -Wextra
      - -pedantic
      - -D_POSIX_C_SOURCE=1
      - -D_C99_SOURCE=1
      - -l crypto
      - -l ssl
      - "-c \"${1}\""
      - "-o \"${2}\""
  :release_linker:
    :executable: gcc
    :name: release_linker
    :arguments:
      - "\"${1}\""
      - -l crypto
      - -l ssl
      - "-o \"${2}\""

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_ide_tests_report
    - xml_tests_report
    # - warnings_report
    - module_generator
    - gcov
...
